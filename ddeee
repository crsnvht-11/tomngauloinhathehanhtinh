/*
Single-file React component for a small "B√°n B√°nh" website.
How to use:
1. Create a React app (Vite or Create React App).
2. Install TailwindCSS and configure according to Tailwind docs.
3. Place this file in src/, import and render it in App.jsx (or replace App.jsx content).

This component uses Tailwind classes (no external images bundled). Images use Unsplash placeholders ‚Äî replace with your own photos for production.

Features included:
- Hero section with subtle heart animation
- Product grid with sample cakes
- Product quick view & recipe modal with ingredients + steps
- Simple cart (add/remove) and checkout simulation
- Responsive layout

Customize texts, prices, images, and recipes as you like.
*/

import React, { useState } from "react";

const SAMPLE_CAKES = [
  {
    id: 1,
    name: "B√°nh B√¥ng Lan Socola Nh√¢n Kem Ph·ªß",
    price: 169000,
    img: "https://images.unsplash.com/photo-1542826438-6c5f8f8ed6a1?q=80&w=1200&auto=format&fit=crop&ixlib=rb-4.0.3&s=1",
    recipe: {
      servings: 8,
      ingredients: [
        "200g b·ªôt m√¨ ƒëa d·ª•ng",
        "50g cacao",
        "200g ƒë∆∞·ªùng",
        "4 qu·∫£ tr·ª©ng (t√°ch l√≤ng tr·∫Øng/l√≤ng ƒë·ªè)",
        "120ml s·ªØa t∆∞∆°i",
        "100g b∆°",
        "Kem t∆∞∆°i + ƒë∆∞·ªùng (ph·ªß v√† trang tr√≠)",
      ],
      steps: [
        "L√†m n√≥ng l√≤ 175¬∞C. R√¢y b·ªôt m√¨ v√† cacao chung.",
        "ƒê√°nh l√≤ng ƒë·ªè v·ªõi ƒë∆∞·ªùng, th√™m b∆° ch·∫£y v√† s·ªØa.",
        "ƒê√°nh l√≤ng tr·∫Øng t·ªõi b√¥ng c·ª©ng r·ªìi tr·ªôn nh·∫π v√†o h·ªón h·ª£p l√≤ng ƒë·ªè.",
        "ƒê·ªï khu√¥n, n∆∞·ªõng 30-35 ph√∫t ho·∫∑c t·ªõi khi que tƒÉm s·∫°ch.",
        "L√†m kem t∆∞∆°i, ph·ªß l√™n b√°nh khi b√°nh ngu·ªôi. Trang tr√≠ theo s·ªü th√≠ch.",
      ],
      tip: "D√πng chocolate ƒëen 55% ƒë·ªÉ tƒÉng v·ªã ƒë·∫≠m; l√†m l·∫°nh b√°nh tr∆∞·ªõc khi c·∫Øt s·∫Ω d·ªÖ d√†ng h∆°n.",
    },
  },
  {
    id: 2,
    name: "B√°nh Ph√¥ Mai T√°o H·ªìi Xu√¢n",
    price: 199000,
    img: "https://images.unsplash.com/photo-1543779505-7e6cf2f1b4a2?q=80&w=1200&auto=format&fit=crop&ixlib=rb-4.0.3&s=2",
    recipe: {
      servings: 8,
      ingredients: [
        "250g ph√¥ mai kem",
        "200g kem t∆∞∆°i",
        "100g ƒë∆∞·ªùng",
        "2 qu·∫£ t√°o th√°i l√°t m·ªèng",
        "ƒê·∫ø b√°nh (b√°nh quy nghi·ªÅn + b∆°)",
      ],
      steps: [
        "L√†m ƒë·∫ø b√°nh b·∫±ng c√°ch tr·ªôn b∆° + b√°nh quy nghi·ªÅn v√† n√©n v√†o khu√¥n.",
        "Tr·ªôn ph√¥ mai, kem t∆∞∆°i v√† ƒë∆∞·ªùng ƒë·∫øn m·ªãn.",
        "ƒê·ªï h·ªón h·ª£p l√™n ƒë·∫ø, x·∫øp t√°o l√™n tr√™n.",
        "L√†m l·∫°nh √≠t nh·∫•t 4 gi·ªù tr∆∞·ªõc khi d√πng.",
      ],
      tip: "Ng√¢m t√°o v·ªõi m·ªôt ch√∫t n∆∞·ªõc c·ªët chanh ƒë·ªÉ t√°o kh√¥ng b·ªã th√¢m.",
    },
  },
  {
    id: 3,
    name: "B√¥ng Lan Truy·ªÅn Th·ªëng V·ªã Matcha",
    price: 159000,
    img: "https://images.unsplash.com/photo-1542827631-9c7b0bfc7d6b?q=80&w=1200&auto=format&fit=crop&ixlib=rb-4.0.3&s=3",
    recipe: {
      servings: 6,
      ingredients: ["150g b·ªôt m√¨", "3 qu·∫£ tr·ª©ng", "100g ƒë∆∞·ªùng", "1 th√¨a b·ªôt matcha", "60ml d·∫ßu ƒÉn"],
      steps: [
        "Tr·ªôn b·ªôt v√† matcha; ƒë√°nh l√≤ng ƒë·ªè v·ªõi ƒë∆∞·ªùng v√† d·∫ßu.",
        "ƒê√°nh b√¥ng l√≤ng tr·∫Øng, tr·ªôn nh·∫π nh√†ng.",
        "N∆∞·ªõng 25-30 ph√∫t ·ªü 170¬∞C.",
      ],
      tip: "R√¢y matcha ƒë·ªÉ tr√°nh c·ª•c, ch·ªçn matcha ch·∫•t l∆∞·ª£ng ƒë·ªÉ b√°nh th∆°m t·ª± nhi√™n.",
    },
  },
];

function formatVND(n) {
  return n.toLocaleString("vi-VN") + " ‚Ç´";
}

export default function BanBanhOnePage() {
  const [selected, setSelected] = useState(null); // selected product for modal
  const [cart, setCart] = useState([]);
  const [query, setQuery] = useState("");

  const addToCart = (p) => {
    setCart((c) => {
      const found = c.find((x) => x.id === p.id);
      if (found) return c.map((x) => (x.id === p.id ? { ...x, qty: x.qty + 1 } : x));
      return [...c, { ...p, qty: 1 }];
    });
  };

  const removeFromCart = (id) => setCart((c) => c.filter((x) => x.id !== id));
  const changeQty = (id, delta) =>
    setCart((c) => c.map((x) => (x.id === id ? { ...x, qty: Math.max(1, x.qty + delta) } : x)));

  const subtotal = cart.reduce((s, i) => s + i.price * i.qty, 0);

  const filtered = SAMPLE_CAKES.filter((p) => p.name.toLowerCase().includes(query.toLowerCase()));

  return (
    <div className="min-h-screen bg-gradient-to-b from-pink-50 to-white text-gray-800">
      <header className="max-w-6xl mx-auto p-6 flex items-center justify-between">
        <div className="flex items-center gap-4">
          <div className="w-12 h-12 rounded-full bg-pink-200 flex items-center justify-center text-2xl font-bold">üç∞</div>
          <div>
            <h1 className="text-2xl font-extrabold">Ti·ªám B√°nh Ng·ªçt - Sweet & Cozy</h1>
            <p className="text-sm text-gray-500">B√°nh t∆∞∆°i h√†ng ng√†y ¬∑ Giao t·∫≠n n∆°i ¬∑ C√¥ng th·ª©c si√™u ngon</p>
          </div>
        </div>
        <div className="flex items-center gap-4">
          <input
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            placeholder="T√¨m b√°nh..."
            className="px-3 py-2 border rounded-lg shadow-sm focus:outline-none"
          />
          <button
            onClick={() => alert('Xin ch√∫c m·ª´ng ‚Äî demo ƒë·∫∑t h√†ng! ƒê·∫øn checkout ƒë·ªÉ ho√†n t·∫•t.')}
            className="px-4 py-2 bg-pink-500 text-white rounded-lg shadow hover:bg-pink-600"
          >
            ƒê·∫∑t ngay
          </button>
          <div className="relative">
            <button
              onClick={() => setSelected({ cartView: true })}
              className="px-3 py-2 border rounded-lg bg-white"
            >
              Gi·ªè h√†ng ({cart.reduce((s, i) => s + i.qty, 0)})
            </button>
          </div>
        </div>
      </header>

      <main className="max-w-6xl mx-auto p-6">
        <section className="flex flex-col md:flex-row gap-6 items-center bg-white rounded-2xl p-6 shadow">
          <div className="flex-1">
            <h2 className="text-3xl md:text-4xl font-extrabold mb-2">B√°nh h√¥m nay ‚Äî y√™u ngay t·ª´ mi·∫øng ƒë·∫ßu ti√™n</h2>
            <p className="text-gray-600 mb-4">C√¥ng th·ª©c do ƒë·∫ßu b·∫øp c·ªßa ch√∫ng t√¥i th·ª≠ nghi·ªám nhi·ªÅu l·∫ßn ƒë·ªÉ ƒë·∫£m b·∫£o v·ªã th∆°m, m·ªÅm v√† c√¢n b·∫±ng.</p>
            <div className="flex gap-3">
              <button onClick={() => window.scrollTo({ top: 600, behavior: 'smooth' })} className="px-4 py-2 bg-pink-500 text-white rounded-lg">Xem s·∫£n ph·∫©m</button>
              <button onClick={() => setSelected(SAMPLE_CAKES[0])} className="px-4 py-2 border rounded-lg">Xem c√¥ng th·ª©c</button>
            </div>
          </div>
          <div className="w-full md:w-1/3 relative">
            <img src={SAMPLE_CAKES[0].img} alt="hero cake" className="rounded-xl shadow-lg w-full object-cover h-56 md:h-72" />
            <div className="absolute -right-4 -top-4 animate-pulse">
              <div className="p-3 rounded-full bg-white shadow">‚ù§Ô∏è</div>
            </div>
          </div>
        </section>

        <section className="mt-8">
          <h3 className="text-xl font-bold mb-4">S·∫£n ph·∫©m n·ªïi b·∫≠t</h3>
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            {filtered.map((p) => (
              <article key={p.id} className="bg-white p-4 rounded-2xl shadow hover:shadow-lg transition">
                <img src={p.img} alt={p.name} className="w-full h-44 object-cover rounded-lg mb-3" />
                <h4 className="font-semibold text-lg">{p.name}</h4>
                <p className="text-pink-600 font-bold mt-1">{formatVND(p.price)}</p>
                <div className="mt-3 flex gap-2">
                  <button onClick={() => setSelected(p)} className="px-3 py-2 border rounded-lg">Xem c√¥ng th·ª©c</button>
                  <button onClick={() => addToCart(p)} className="px-3 py-2 bg-pink-500 text-white rounded-lg">Th√™m v√†o gi·ªè</button>
                </div>
              </article>
            ))}
          </div>
        </section>

        <section className="mt-10 bg-white p-6 rounded-2xl shadow">
          <h3 className="text-xl font-bold mb-3">V√¨ sao ch·ªçn ch√∫ng t√¥i?</h3>
          <ul className="grid grid-cols-1 md:grid-cols-3 gap-4 text-gray-700">
            <li className="p-3 border rounded">C√¥ng th·ª©c chu·∫©n ‚Äî th·ª≠ nghi·ªám k·ªπ l∆∞·ª°ng</li>
            <li className="p-3 border rounded">Nguy√™n li·ªáu t∆∞∆°i ‚Äî kh√¥ng ch·∫•t b·∫£o qu·∫£n</li>
            <li className="p-3 border rounded">Giao nhanh ‚Äî ƒë√≥ng g√≥i chuy√™n nghi·ªáp</li>
          </ul>
        </section>
      </main>

      <footer className="max-w-6xl mx-auto p-6 text-gray-600">
        <div className="flex flex-col md:flex-row justify-between items-center">
          <p>¬© {new Date().getFullYear()} Ti·ªám B√°nh Ng·ªçt ‚Äî S√°ng t·∫°o b·ªüi b·∫°n.</p>
          <p>Li√™n h·ªá: +84 9xx xxx xxx ¬∑ email@tiembanh.example</p>
        </div>
      </footer>

      {/* Modal */}
      {selected && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/40 p-4">
          <div className="bg-white rounded-2xl w-full max-w-3xl p-6 relative overflow-auto max-h-[90vh]">
            <button onClick={() => setSelected(null)} className="absolute top-4 right-4 p-2 rounded-full border">‚úï</button>
            {selected.cartView ? (
              <div>
                <h3 className="text-xl font-bold mb-4">Gi·ªè h√†ng</h3>
                {cart.length === 0 ? (
                  <p>Gi·ªè h√†ng tr·ªëng ‚Äî th√™m v√†i chi·∫øc b√°nh th√¥i n√†o! üßÅ</p>
                ) : (
                  <div>
                    {cart.map((it) => (
                      <div key={it.id} className="flex items-center gap-4 border-b py-3">
                        <img src={it.img} alt={it.name} className="w-20 h-20 obj
